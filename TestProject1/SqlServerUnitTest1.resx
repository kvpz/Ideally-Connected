<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HumanResources_uspUpdateEmployeeHireInfoTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for HumanResources.uspUpdateEmployeeHireInfo
DECLARE @RC AS INT, @BusinessEntityID AS INT, @JobTitle AS NVARCHAR (50), @HireDate AS DATETIME, @RateChangeDate AS DATETIME, @Rate AS MONEY, @PayFrequency AS TINYINT, @CurrentFlag AS [dbo].[Flag];

SELECT @RC = 0,
       @BusinessEntityID = 0,
       @JobTitle = NULL,
       @HireDate = getdate(),
       @RateChangeDate = getdate(),
       @Rate = NULL,
       @PayFrequency = NULL,
       @CurrentFlag = NULL;

EXECUTE @RC = [HumanResources].[uspUpdateEmployeeHireInfo] @BusinessEntityID, @JobTitle, @HireDate, @RateChangeDate, @Rate, @PayFrequency, @CurrentFlag;

SELECT @RC AS RC;

</value>
  </data>
  <data name="HumanResources_uspUpdateEmployeeLoginTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for HumanResources.uspUpdateEmployeeLogin
DECLARE @RC AS INT, @BusinessEntityID AS INT, @OrganizationNode AS [sys].[hierarchyid], @LoginID AS NVARCHAR (256), @JobTitle AS NVARCHAR (50), @HireDate AS DATETIME, @CurrentFlag AS [dbo].[Flag];

SELECT @RC = 0,
       @BusinessEntityID = 0,
       @OrganizationNode = NULL,
       @LoginID = NULL,
       @JobTitle = NULL,
       @HireDate = getdate(),
       @CurrentFlag = NULL;

EXECUTE @RC = [HumanResources].[uspUpdateEmployeeLogin] @BusinessEntityID, @OrganizationNode, @LoginID, @JobTitle, @HireDate, @CurrentFlag;

SELECT @RC AS RC;

</value>
  </data>
  <data name="HumanResources_uspUpdateEmployeePersonalInfoTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for HumanResources.uspUpdateEmployeePersonalInfo
DECLARE @RC AS INT, @BusinessEntityID AS INT, @NationalIDNumber AS NVARCHAR (15), @BirthDate AS DATETIME, @MaritalStatus AS NCHAR (1), @Gender AS NCHAR (1);

SELECT @RC = 0,
       @BusinessEntityID = 0,
       @NationalIDNumber = NULL,
       @BirthDate = getdate(),
       @MaritalStatus = NULL,
       @Gender = NULL;

EXECUTE @RC = [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID, @NationalIDNumber, @BirthDate, @MaritalStatus, @Gender;

SELECT @RC AS RC;

</value>
  </data>
  <data name="dbo_uspGetBillOfMaterialsTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.uspGetBillOfMaterials
DECLARE @RC AS INT, @StartProductID AS INT, @CheckDate AS DATETIME;

SELECT @RC = 0,
       @StartProductID = 0,
       @CheckDate = getdate();

EXECUTE @RC = [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate;

SELECT @RC AS RC;

</value>
  </data>
  <data name="dbo_uspGetEmployeeManagersTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.uspGetEmployeeManagers
DECLARE @RC AS INT, @BusinessEntityID AS INT;

SELECT @RC = 0,
       @BusinessEntityID = 0;

EXECUTE @RC = [dbo].[uspGetEmployeeManagers] @BusinessEntityID;

SELECT @RC AS RC;

</value>
  </data>
  <data name="dbo_uspGetManagerEmployeesTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.uspGetManagerEmployees
DECLARE @RC AS INT, @BusinessEntityID AS INT;

SELECT @RC = 0,
       @BusinessEntityID = 0;

EXECUTE @RC = [dbo].[uspGetManagerEmployees] @BusinessEntityID;

SELECT @RC AS RC;

</value>
  </data>
  <data name="dbo_uspGetWhereUsedProductIDTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.uspGetWhereUsedProductID
DECLARE @RC AS INT, @StartProductID AS INT, @CheckDate AS DATETIME;

SELECT @RC = 0,
       @StartProductID = 0,
       @CheckDate = getdate();

EXECUTE @RC = [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate;

SELECT @RC AS RC;

</value>
  </data>
  <data name="dbo_uspLogErrorTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.uspLogError
DECLARE @RC AS INT, @ErrorLogID AS INT;

SELECT @RC = 0;

EXECUTE @RC = [dbo].[uspLogError] @ErrorLogID OUTPUT;

SELECT @RC AS RC,
       @ErrorLogID AS ErrorLogID;

</value>
  </data>
  <data name="dbo_uspPrintErrorTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.uspPrintError
DECLARE @RC AS INT;

SELECT @RC = 0;

EXECUTE @RC = [dbo].[uspPrintError] ;

SELECT @RC AS RC;

</value>
  </data>
  <data name="dbo_uspSearchCandidateResumesTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.uspSearchCandidateResumes
DECLARE @RC AS INT, @searchString AS NVARCHAR (1000), @useInflectional AS BIT, @useThesaurus AS BIT, @language AS INT;

SELECT @RC = 0,
       @searchString = NULL,
       @useInflectional = 0,
       @useThesaurus = 0,
       @language = 0;

EXECUTE @RC = [dbo].[uspSearchCandidateResumes] @searchString, @useInflectional, @useThesaurus, @language;

SELECT @RC AS RC;

</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>